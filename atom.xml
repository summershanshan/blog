<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>夏之珊’s blog</title>
  
  <subtitle>fighting!</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://summershanshan.github.io/"/>
  <updated>2019-11-06T06:49:49.000Z</updated>
  <id>https://summershanshan.github.io/</id>
  
  <author>
    <name>程序喵</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Array 读书方法小记</title>
    <link href="https://summershanshan.github.io/2019/11/06/array/"/>
    <id>https://summershanshan.github.io/2019/11/06/array/</id>
    <published>2019-11-06T05:08:00.000Z</published>
    <updated>2019-11-06T06:49:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Array-的原始迭代方法-ES5"><a href="#Array-的原始迭代方法-ES5" class="headerlink" title="Array 的原始迭代方法(ES5)"></a>Array 的原始迭代方法(ES5)</h2><ol><li>every(): 对数组中的每一项运行给定函数，如果该函数对每一项都返回true,则返回true。</li><li>filter(): 对数组的中每一项运行给定函数，返回该函数会返回true的项组成的数组。</li><li>forEach(): 对数组中的每一项都运行给定函数。这个方法没有返回值。</li><li>map(): 对数组中的每一项都运行给定函数，返回每次函数调用的结果组成的数组。</li><li>some(): 对数组中的每一项都运行给定函数，如果该函数对任一项返回true,则返回true。</li></ol><p>这些方法都不会修改数组中的包含的值。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"> <span class="comment">// every()</span></span><br><span class="line"> <span class="keyword">var</span> everyResult = numbers.every(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>)</span>{</span><br><span class="line">     <span class="keyword">return</span> item &gt; <span class="number">2</span>;</span><br><span class="line"> });</span><br><span class="line"> <span class="built_in">console</span>.log(everyResult); <span class="comment">// false</span></span><br><span class="line"> <span class="built_in">console</span>.log(numbers); <span class="comment">//原数组不变：[1,2,3,4,5,6,7,8]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// some()</span></span><br><span class="line"> <span class="keyword">var</span> someResult = numbers.some(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>)</span>{</span><br><span class="line">     <span class="keyword">return</span> item &gt; <span class="number">2</span>;</span><br><span class="line"> });</span><br><span class="line"> <span class="built_in">console</span>.log(someResult); <span class="comment">// true</span></span><br><span class="line"> <span class="built_in">console</span>.log(numbers); <span class="comment">//原数组不变：[1,2,3,4,5,6,7,8]</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// filter()</span></span><br><span class="line"> <span class="keyword">var</span> filterResult = numbers.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>)</span>{</span><br><span class="line">     <span class="keyword">return</span> item &gt; <span class="number">2</span>;</span><br><span class="line"> });</span><br><span class="line"> <span class="built_in">console</span>.log(filterResult); <span class="comment">// [3,4,5,6,7,8]</span></span><br><span class="line"> <span class="built_in">console</span>.log(numbers) <span class="comment">// 原数组不变：[1,2,3,4,5,6,7,8]</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//map()</span></span><br><span class="line"> <span class="keyword">var</span> mapResult = numbers.map(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>)</span>{</span><br><span class="line">     <span class="keyword">return</span> item * <span class="number">2</span>;</span><br><span class="line"> });</span><br><span class="line"> <span class="built_in">console</span>.log(mapResult); <span class="comment">// [2,4,6,8,10,12,14,16]</span></span><br><span class="line"> <span class="built_in">console</span>.log(numbers); <span class="comment">// 原数组不变：[1,2,3,4,5,6,7,8] </span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// forEach 没有返回值</span></span><br><span class="line"> numbers.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>)</span>{</span><br><span class="line">    <span class="comment">//执行一系列操作</span></span><br><span class="line"> });</span><br></pre></td></tr></tbody></table></figure><h2 id="Array-归并方法"><a href="#Array-归并方法" class="headerlink" title="Array 归并方法"></a>Array 归并方法</h2><ol><li>reduce(): 从数组第一项开始，逐个遍历到最后，然后构建一个最终返回的值。</li><li>reduceRight(): 用法同reduce，只不过是从数组最后一项开始，逐个遍历到第一项。方向相反。<br>方法接受两个参数：一个是在每一项上调用的函数 和 作为归并基础的初始值（第二个参数是可选项）。如果第二个参数不填，那么初始值就是开始遍历的第一项。<br>第一个参数函数 接受四个参数： 前一个值、当前值、项的索引和数组对象。这个函数返回的任何值都会作为一个参数自动传给下一项。<br>例子：<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求数组所有值之和</span></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>];</span><br><span class="line"><span class="keyword">var</span> sum = numbers.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, cur, index, array</span>)</span>{</span><br><span class="line">    <span class="keyword">return</span> prev + cur;</span><br><span class="line">});</span><br><span class="line"><span class="built_in">console</span>.log(sum); <span class="comment">//36</span></span><br></pre></td></tr></tbody></table></figure></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Array-的原始迭代方法-ES5&quot;&gt;&lt;a href=&quot;#Array-的原始迭代方法-ES5&quot; class=&quot;headerlink&quot; title=&quot;Array 的原始迭代方法(ES5)&quot;&gt;&lt;/a&gt;Array 的原始迭代方法(ES5)&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;ev
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://summershanshan.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://summershanshan.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>CustomEvent（自定义事件） 初识篇</title>
    <link href="https://summershanshan.github.io/2019/10/25/customEvent/"/>
    <id>https://summershanshan.github.io/2019/10/25/customEvent/</id>
    <published>2019-10-25T09:22:39.000Z</published>
    <updated>2019-10-25T10:07:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自定义事件（CustomEvent）"><a href="#自定义事件（CustomEvent）" class="headerlink" title="自定义事件（CustomEvent）"></a>自定义事件（CustomEvent）</h2><p>创建自定义事件语法定义 </p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> event = <span class="keyword">new</span> CustomEvent(type[, eventInitDict])</span><br></pre></td></tr></tbody></table></figure><blockquote><p>类似于Event事件的构造函数进行工作，除了可选的eventInitDict参数现在还允许设置detail属性。</p></blockquote><p>创建自定义事件</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个用户登录的自定义事件</span></span><br><span class="line"><span class="keyword">let</span> loginEvent = <span class="keyword">new</span> CustomEvent(<span class="string">'userLogin'</span>,{</span><br><span class="line">    username:<span class="string">'xiaoming'</span></span><br><span class="line">});</span><br><span class="line"><span class="comment">// 触发</span></span><br><span class="line">someElement.dispatchEvent(loginEvent);</span><br></pre></td></tr></tbody></table></figure><p>// 添加事件监听器（还和之前一样）</p><figure class="highlight javascript"><figcaption><span>监听函数</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">someElement.addEventListener(<span class="string">'userLogion'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">    <span class="built_in">console</span>.log(e.detail);</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>但不是所有浏览器都支持自定义事件CustomEvent这个API的。尤其是ie浏览器。 可以自己封装一个。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装一个CustomEvent</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">window</span>.CustomEvent ==== <span class="string">'undefined'</span>){</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">CustomEvent</span>(<span class="params">event, params</span>)</span>{</span><br><span class="line">            params = params || {</span><br><span class="line">                bubbles:<span class="literal">false</span>,</span><br><span class="line">                cancelable:<span class="literal">false</span>,</span><br><span class="line">                detail:<span class="literal">undefined</span></span><br><span class="line">            };</span><br><span class="line">            <span class="keyword">var</span> evt = <span class="built_in">document</span>.createEvent(<span class="string">'Events'</span>);</span><br><span class="line">            <span class="keyword">var</span> bubbles = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> name <span class="keyword">in</span> params){</span><br><span class="line">                name === <span class="string">'bubbles'</span> ? (bubbles = !!params[name]) : (evt[name] = params[name]);</span><br><span class="line">            };</span><br><span class="line">            evt.initEvent(event, bubbles, <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">return</span> evt;</span><br><span class="line">        };</span><br><span class="line">        CustomEvent.prototype = <span class="built_in">window</span>.Event.prototype;</span><br><span class="line">        <span class="built_in">window</span>.CustomEvent = CustomEvent;</span><br><span class="line">    }</span><br><span class="line">})()</span><br><span class="line"><span class="comment">// 另一种写法</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">window</span>.CustomEvent){</span><br><span class="line">    widow.CustomEvent = <span class="function"><span class="keyword">function</span>(<span class="params">type, config</span>)</span>{</span><br><span class="line">        config = config || { <span class="attr">bubbles</span>:<span class="literal">false</span>,<span class="attr">cancelable</span>:<span class="literal">false</span>,<span class="attr">detail</span>:<span class="literal">undefined</span>};</span><br><span class="line">        <span class="keyword">var</span> evt = <span class="built_in">document</span>.createEvent(<span class="string">'CustomEvent'</span>);</span><br><span class="line">        evt.initCustomEvent(type, config,bubbles, config.cancelable, config.detail);</span><br><span class="line">        <span class="keyword">return</span> evt;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">window</span>.CustomEvent.prototype = <span class="built_in">window</span>.Event.prototype;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;自定义事件（CustomEvent）&quot;&gt;&lt;a href=&quot;#自定义事件（CustomEvent）&quot; class=&quot;headerlink&quot; title=&quot;自定义事件（CustomEvent）&quot;&gt;&lt;/a&gt;自定义事件（CustomEvent）&lt;/h2&gt;&lt;p&gt;创建自定义事件语法定义 &lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; event = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CustomEvent(type[, eventInitDict])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;&lt;p&gt;类似于Event事件的构造函数进行工作，除了可选的eventInitDict参数现在还允许设置detail属性。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;创建自定义事件&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建一个用户登录的自定义事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; loginEvent = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CustomEvent(&lt;span class=&quot;string&quot;&gt;&#39;userLogin&#39;&lt;/span&gt;,{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    username:&lt;span class=&quot;string&quot;&gt;&#39;xiaoming&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;});&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 触发&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;someElement.dispatchEvent(loginEvent);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;// 添加事件监听器（还和之前一样）&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;figcaption&gt;&lt;span&gt;监听函数&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;someElement.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;userLogion&#39;&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;)&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(e.detail);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;})&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://summershanshan.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://summershanshan.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 语法初识篇</title>
    <link href="https://summershanshan.github.io/2019/10/23/hexoTest/"/>
    <id>https://summershanshan.github.io/2019/10/23/hexoTest/</id>
    <published>2019-10-23T05:29:39.000Z</published>
    <updated>2019-10-25T09:26:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{% blockquote Divid Levithan, Wide Awake %}</span><br><span class="line">Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</span><br><span class="line">{% endblockquote %}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{% blockquote @DevDocs https://twitter.com/devdocs/status/356095192085962752 %}</span><br><span class="line">    @DevDocs </span><br><span class="line">{% endblockquote %}</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %}</span><br><span class="line">Every interaction is both precious and an opportunity to delight.</span><br><span class="line">{% endblockquote %}</span><br></pre></td></tr></tbody></table></figure><p>案例：</p><blockquote><p>Every interaction is both precious and an opportunity to delight.</p><footer><strong>Seth Godin</strong><cite><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html" target="_blank" rel="noopener">Welcome to Island Marketing</a></cite></footer></blockquote><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><h3 id="普通代码块"><a href="#普通代码块" class="headerlink" title="普通代码块"></a>普通代码块</h3><p>代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{% codeblock %}</span><br><span class="line">alert('Hello world')</span><br><span class="line">{% endcodeblock %}</span><br></pre></td></tr></tbody></table></figure><p>渲染结果：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert('Hello world')</span><br></pre></td></tr></tbody></table></figure><h3 id="指定语言"><a href="#指定语言" class="headerlink" title="指定语言"></a>指定语言</h3><p>代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">{% codeblock lang:javascript %}</span><br><span class="line">const a = 10;</span><br><span class="line">const b = 12;</span><br><span class="line">console.log(a, b);</span><br><span class="line">{% endcodeblock %}</span><br></pre></td></tr></tbody></table></figure><p>渲染结果：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="number">12</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a, b);</span><br></pre></td></tr></tbody></table></figure><h3 id="附加说明"><a href="#附加说明" class="headerlink" title="附加说明"></a>附加说明</h3><p>代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{% codeblock Array.map %}</span><br><span class="line">array.map(callback[, thisArg])</span><br><span class="line">{% endcodeblock %}</span><br></pre></td></tr></tbody></table></figure><p>渲染结果：</p><figure class="highlight plain"><figcaption><span>Array.map</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.map(callback[, thisArg])</span><br></pre></td></tr></tbody></table></figure><h3 id="附加说明和网址"><a href="#附加说明和网址" class="headerlink" title="附加说明和网址"></a>附加说明和网址</h3><p>代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">{% codeblock lang:html @Ptengine http://www.ptengine.cn %}</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        Ptengine的愿景是成为全球数据领域客户最信赖的合作伙伴。</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">{% endcodeblock %}</span><br></pre></td></tr></tbody></table></figure><p>渲染结果：</p><figure class="highlight html"><figcaption><span>@Ptengine</span><a href="http://www.ptengine.cn" target="_blank" rel="noopener">link</a></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    Ptengine的愿景是成为全球数据领域客户最信赖的合作伙伴。</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="反引号代码块"><a href="#反引号代码块" class="headerlink" title="反引号代码块"></a>反引号代码块</h3><figure class="highlight html"><figcaption><span>水果列表</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 反引号代码块样例 [language][title][url][link text] --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1. 苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1. 香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Pull-Quote"><a href="#Pull-Quote" class="headerlink" title="Pull Quote"></a>Pull Quote</h2><p>在文章中插入Pull quote</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{% pullquote [class]%}</span><br><span class="line">content</span><br><span class="line">{% endpullquote %}</span><br></pre></td></tr></tbody></table></figure><blockquote class="pullquote [class]"><p>content</p></blockquote><h2 id="jsFiddle"><a href="#jsFiddle" class="headerlink" title="jsFiddle"></a>jsFiddle</h2><p>在文章中嵌入jsFiddle</p><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/shorttag/embedded/js,resources,html,css,result/light" frameborder="0" allowfullscreen=""></iframe><h2 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h2><p>在文章中嵌入image</p><img src="https://tzpteadpicture.ptengine.cn/images/1568636013489.jpg" class="girl" width="200" height="200" title="小女孩"><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p>在文章中插入链接，并自动给外部链接添加 target=”_blank”属性</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{% link Ptengine https://report.ptengine.cn ptengine report %}</span><br></pre></td></tr></tbody></table></figure><a href="https://report.ptengine.cn/" title="ptengine report" target="">Ptengine</a><h2 id="Include-Code"><a href="#Include-Code" class="headerlink" title="Include Code"></a>Include Code</h2><p>插入 source/downloads/code 文件夹内的代码文件。source/downloads/code不是固定的，取决于你在配置文件中code_dir的配置。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{% include_code test lang:javascript from:1 to:2 demo.js %}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><figcaption><span>test</span><a href="/blog/downloads/code/demo.js">view raw</a></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="number">2</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="Youtube"><a href="#Youtube" class="headerlink" title="Youtube"></a>Youtube</h2><p>在文章中插入Youtube视频</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{% youtube video_id %}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引用块&quot;&gt;&lt;a href=&quot;#引用块&quot; class=&quot;headerlink&quot; title=&quot;引用块&quot;&gt;&lt;/a&gt;引用块&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;{% blockquote Divid Levithan, Wide Awake %}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;{% endblockquote %}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;{% blockquote @DevDocs https://twitter.com/devdocs/status/356095192085962752 %}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @DevDocs &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;{% endblockquote %}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="practice" scheme="https://summershanshan.github.io/categories/practice/"/>
    
    
      <category term="hexo doc" scheme="https://summershanshan.github.io/tags/hexo-doc/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://summershanshan.github.io/2019/10/23/hello-world/"/>
    <id>https://summershanshan.github.io/2019/10/23/hello-world/</id>
    <published>2019-10-23T03:03:04.000Z</published>
    <updated>2019-10-25T09:18:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><a id="more"></a><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
