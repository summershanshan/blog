{"meta":{"title":"夏之珊’s blog","subtitle":"fighting!","description":null,"author":"程序喵","url":"https://summershanshan.github.io","root":"/blog/"},"pages":[{"title":"about","date":"2019-10-25T09:03:36.000Z","updated":"2019-10-25T09:03:51.000Z","comments":true,"path":"about/index.html","permalink":"https://summershanshan.github.io/about/index.html","excerpt":"","text":"this page is comming… document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"categories","date":"2019-10-23T10:07:54.000Z","updated":"2019-10-25T09:18:59.000Z","comments":true,"path":"categories/index.html","permalink":"https://summershanshan.github.io/categories/index.html","excerpt":"","text":"categories document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"Node.js学习之Buffer笔记","date":"2019-10-28T03:08:00.000Z","updated":"2019-11-06T05:56:17.000Z","comments":true,"path":"draft/Node.js学习之子进程.html","permalink":"https://summershanshan.github.io/draft/Node.js%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%AD%90%E8%BF%9B%E7%A8%8B.html","excerpt":"","text":"child_process 子进程child_process模块提供了衍生子进程的功能，这个功能主要由【child_porcess.spawn()】函数提供 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"Array 读书方法小记","date":"2019-11-06T05:08:00.000Z","updated":"2019-11-06T06:51:50.000Z","comments":true,"path":"draft/array.html","permalink":"https://summershanshan.github.io/draft/array.html","excerpt":"","text":"Array 的原始迭代方法(ES5) every(): 对数组中的每一项运行给定函数，如果该函数对每一项都返回true,则返回true。 filter(): 对数组的中每一项运行给定函数，返回该函数会返回true的项组成的数组。 forEach(): 对数组中的每一项都运行给定函数。这个方法没有返回值。 map(): 对数组中的每一项都运行给定函数，返回每次函数调用的结果组成的数组。 some(): 对数组中的每一项都运行给定函数，如果该函数对任一项返回true,则返回true。 这些方法都不会修改数组中的包含的值。 12345678910111213141516171819202122232425262728293031323334 var numbers = [1,2,3,4,5,6,7,8]; // every() var everyResult = numbers.every(function(item, index, array){ return item &gt; 2; }); console.log(everyResult); // false console.log(numbers); //原数组不变：[1,2,3,4,5,6,7,8]// some() var someResult = numbers.some(function(item, index, array){ return item &gt; 2; }); console.log(someResult); // true console.log(numbers); //原数组不变：[1,2,3,4,5,6,7,8] // filter() var filterResult = numbers.filter(function(item, index, array){ return item &gt; 2; }); console.log(filterResult); // [3,4,5,6,7,8] console.log(numbers) // 原数组不变：[1,2,3,4,5,6,7,8] //map() var mapResult = numbers.map(function(item, index, array){ return item * 2; }); console.log(mapResult); // [2,4,6,8,10,12,14,16] console.log(numbers); // 原数组不变：[1,2,3,4,5,6,7,8] // forEach 没有返回值 numbers.forEach(function(item, index, array){ //执行一系列操作 }); Array 归并方法 reduce(): 从数组第一项开始，逐个遍历到最后，然后构建一个最终返回的值。 reduceRight(): 用法同reduce，只不过是从数组最后一项开始，逐个遍历到第一项。方向相反。方法接受两个参数：一个是在每一项上调用的函数 和 作为归并基础的初始值（第二个参数是可选项）。如果第二个参数不填，那么初始值就是开始遍历的第一项。第一个参数函数 接受四个参数： 前一个值、当前值、项的索引和数组对象。这个函数返回的任何值都会作为一个参数自动传给下一项。例子：123456// 求数组所有值之和var numbers = [1,2,3,4,5,6,7,8];var sum = numbers.reduce(function(prev, cur, index, array){ return prev + cur;});console.log(sum); //36 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"Node.js学习之Buffer笔记","date":"2019-10-28T03:08:00.000Z","updated":"2019-11-06T05:56:22.000Z","comments":true,"path":"draft/node.js学习系列之Buffer.html","permalink":"https://summershanshan.github.io/draft/node.js%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E4%B9%8BBuffer.html","excerpt":"","text":"Buffer在ECMAScript 2015(ES6)引入TypeArray之前，Javascript语言没有读取或操作二进制数据流的机制。Buffer类被引入作为Node.js API的一部分，使其可以在TCP流或文件系统操作等场景中处理二进制数据流。 ** Buffer类的实例类似于整数数组，但Buffer的大小是固定的、且在V8堆外分配物理内存。Buffer的大小在被创建时确定，且无法调整。 ** Buffer类在Node.js中时一个全局变量，因此无需使用require(‘Buffer’).Buffer。 可以直接使用。 Buffer.from(),Buffer.alloc(), and Buffer.allocUnsafe()历史：因为new Buffer()的行为会根据所传人的第一个参数的值的数据类型而明显改变，所以如果未能正确的将校验好的参数传递给new Buffer(),可能会产品意想不到的错误。 为了让创建Buffer更可靠、更不容易出错。各种new Buffer()构造函数已被弃用，并由 Buffer.from()、Buffer.alloc() 和 Buffer.allocUnsafe()代替。 Buffer.from1234Buffer.form(array) // 返回一个新建的包含所提供的字节数组的副本的Buffer.Buffer.from(arrayBuffer[, byteOffset [, length]]) // 返回一个新建的与给定的ArrayBuffer共享一内存的Buffer。Buffer.from(buffer); // 返回一个新建的包含所提供的Buffer的内容的副本的Buffer.Buffer.from(string[, endcoding]) 返回一个新建的包含所提供的字符串的副本的Buffer。 Buffer.alloc1234567891011Buffer.alloc(size[, fill[, encoding]]);// 返回一个指定大小的被填满的Buffer实例。这个方法明显地比Buffer.allocUnsafe(size)慢，但可确保新创建的Buffer实例绝不会包含旧的和潜在的敏感数据.【size】: &lt;integer&gt; 新建的Buffer期望的长度【fill】: &lt;string&gt; | &lt;Buffer&gt; | &lt;integer&gt; 用来预填充新建的Buffer的值。默认：0；【encoding】: &lt;string&gt; 如果fill是字符串，则该值是它的字符编码。默认’utf8‘ const buf = Buffer.alloc(5); console.log(buf); // 输出：&lt;Buffer 00 00 00 00 00&gt; const buf1 = Buffer.alloc(5, 'a'); console.log(buf1); // 输出：&lt;Buffer 61 61 61 61 61&gt; Buffer.allocUnsafe12345678910Buffer.allocUnsafe(size);Buffer.allocUnsafeSlow(size);// 返回一个新建的指定size的Buffer,但它的内容必须被初始化，可以使用buf.fill(0)或者完全写满。// 注：如果size小于或等于Buffer.poolSize的一半，则Buffer.allocUnsafe()返回的Buffer实例可能会被分配进一个共享的内部内存池。// 例子：const buf = Buffer.allocUnsafe(10);console.log(buf); buf.fill(0); console.log(buf); //&lt;Buffer 00 00 00 00 00 00 00 00 00 00&gt;&gt; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"tags","date":"2019-10-25T09:02:00.000Z","updated":"2019-10-25T09:17:25.000Z","comments":true,"path":"tags/index.html","permalink":"https://summershanshan.github.io/tags/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"","date":"2019-10-23T07:47:16.000Z","updated":"2019-10-23T06:09:54.000Z","comments":true,"path":"downloads/code/demo.js","permalink":"https://summershanshan.github.io/downloads/code/demo.js","excerpt":"","text":"const a = 1; const b = 2; function sort(a, b){ return a - b; } document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"}],"posts":[{"title":"CustomEvent（自定义事件） 初识篇","slug":"customEvent","date":"2019-10-25T09:22:39.000Z","updated":"2019-10-25T10:07:26.000Z","comments":true,"path":"2019/10/25/customEvent/","link":"","permalink":"https://summershanshan.github.io/2019/10/25/customEvent/","excerpt":"自定义事件（CustomEvent）创建自定义事件语法定义 1var event = new CustomEvent(type[, eventInitDict]) 类似于Event事件的构造函数进行工作，除了可选的eventInitDict参数现在还允许设置detail属性。 创建自定义事件 123456// 创建一个用户登录的自定义事件let loginEvent = new CustomEvent('userLogin',{ username:'xiaoming'});// 触发someElement.dispatchEvent(loginEvent); // 添加事件监听器（还和之前一样） 监听函数1234someElement.addEventListener('userLogion',function(e){ console.log(e); console.log(e.detail);})","text":"自定义事件（CustomEvent）创建自定义事件语法定义 1var event = new CustomEvent(type[, eventInitDict]) 类似于Event事件的构造函数进行工作，除了可选的eventInitDict参数现在还允许设置detail属性。 创建自定义事件 123456// 创建一个用户登录的自定义事件let loginEvent = new CustomEvent('userLogin',{ username:'xiaoming'});// 触发someElement.dispatchEvent(loginEvent); // 添加事件监听器（还和之前一样） 监听函数1234someElement.addEventListener('userLogion',function(e){ console.log(e); console.log(e.detail);}) 但不是所有浏览器都支持自定义事件CustomEvent这个API的。尤其是ie浏览器。 可以自己封装一个。 1234567891011121314151617181920212223242526272829303132// 封装一个CustomEvent(function(){ if(typeof window.CustomEvent ==== 'undefined'){ function CustomEvent(event, params){ params = params || { bubbles:false, cancelable:false, detail:undefined }; var evt = document.createEvent('Events'); var bubbles = true; for(var name in params){ name === 'bubbles' ? (bubbles = !!params[name]) : (evt[name] = params[name]); }; evt.initEvent(event, bubbles, true); return evt; }; CustomEvent.prototype = window.Event.prototype; window.CustomEvent = CustomEvent; }})()// 另一种写法if(!window.CustomEvent){ widow.CustomEvent = function(type, config){ config = config || { bubbles:false,cancelable:false,detail:undefined}; var evt = document.createEvent('CustomEvent'); evt.initCustomEvent(type, config,bubbles, config.cancelable, config.detail); return evt; } window.CustomEvent.prototype = window.Event.prototype;} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"javascript","slug":"javascript","permalink":"https://summershanshan.github.io/categories/javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://summershanshan.github.io/tags/javascript/"}]},{"title":"Hexo 语法初识篇","slug":"hexoTest","date":"2019-10-23T05:29:39.000Z","updated":"2019-10-25T09:26:00.000Z","comments":true,"path":"2019/10/23/hexoTest/","link":"","permalink":"https://summershanshan.github.io/2019/10/23/hexoTest/","excerpt":"引用块123{% blockquote Divid Levithan, Wide Awake %}Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.{% endblockquote %} 123{% blockquote @DevDocs https://twitter.com/devdocs/status/356095192085962752 %} @DevDocs {% endblockquote %}","text":"引用块123{% blockquote Divid Levithan, Wide Awake %}Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.{% endblockquote %} 123{% blockquote @DevDocs https://twitter.com/devdocs/status/356095192085962752 %} @DevDocs {% endblockquote %} 123{% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %}Every interaction is both precious and an opportunity to delight.{% endblockquote %} 案例： Every interaction is both precious and an opportunity to delight. Seth GodinWelcome to Island Marketing 代码块普通代码块代码： 123{% codeblock %}alert('Hello world'){% endcodeblock %} 渲染结果： 1alert('Hello world') 指定语言代码： 12345{% codeblock lang:javascript %}const a = 10;const b = 12;console.log(a, b);{% endcodeblock %} 渲染结果： 123const a = 10;const b = 12;console.log(a, b); 附加说明代码： 123{% codeblock Array.map %}array.map(callback[, thisArg]){% endcodeblock %} 渲染结果： Array.map1array.map(callback[, thisArg]) 附加说明和网址代码： 12345{% codeblock lang:html @Ptengine http://www.ptengine.cn %} &lt;div&gt; Ptengine的愿景是成为全球数据领域客户最信赖的合作伙伴。 &lt;/div&gt;{% endcodeblock %} 渲染结果： @Ptenginelink123&lt;div&gt; Ptengine的愿景是成为全球数据领域客户最信赖的合作伙伴。&lt;/div&gt; 反引号代码块水果列表12345&lt;!-- 反引号代码块样例 [language][title][url][link text] --&gt;&lt;ul&gt; &lt;li&gt;1. 苹果&lt;/li&gt; &lt;li&gt;1. 香蕉&lt;/li&gt;&lt;/ul&gt; Pull Quote在文章中插入Pull quote 123{% pullquote [class]%}content{% endpullquote %} content jsFiddle在文章中嵌入jsFiddle Image在文章中嵌入image Link在文章中插入链接，并自动给外部链接添加 target=”_blank”属性 1{% link Ptengine https://report.ptengine.cn ptengine report %} Ptengine Include Code插入 source/downloads/code 文件夹内的代码文件。source/downloads/code不是固定的，取决于你在配置文件中code_dir的配置。 1{% include_code test lang:javascript from:1 to:2 demo.js %} testview raw12const a = 1;const b = 2; Youtube在文章中插入Youtube视频 1{% youtube video_id %} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"practice","slug":"practice","permalink":"https://summershanshan.github.io/categories/practice/"}],"tags":[{"name":"hexo doc","slug":"hexo-doc","permalink":"https://summershanshan.github.io/tags/hexo-doc/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-10-23T03:03:04.000Z","updated":"2019-10-25T09:18:04.000Z","comments":true,"path":"2019/10/23/hello-world/","link":"","permalink":"https://summershanshan.github.io/2019/10/23/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]}]}